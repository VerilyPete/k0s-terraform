name: 'Destroy Environment'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - staging
          - production
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

permissions:
  contents: read
  id-token: write

env:
  TF_VERSION: '1.12.1'
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
  # These environment variables are no longer needed - using terraform.tfvars instead

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Validate destroy confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "‚ùå Destroy confirmation failed. You must type 'DESTROY' exactly."
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup OCI CLI
        run: |
          # Install OCI CLI
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh > install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          rm install.sh
          
          # Configure OCI CLI using absolute paths
          mkdir -p /home/runner/.oci
          echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > /home/runner/.oci/oci_api_key.pem
          chmod 600 /home/runner/.oci/oci_api_key.pem
          
          cat > /home/runner/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          region=${{ secrets.OCI_CLI_REGION }}
          key_file=/home/runner/.oci/oci_api_key.pem
          EOF
          
          chmod 600 /home/runner/.oci/config

      - name: Create terraform.tfvars
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          # Create terraform.tfvars with private key path
          cat > terraform.tfvars << EOF
          # OCI Provider Configuration
          tenancy_ocid       = "${{ secrets.OCI_CLI_TENANCY }}"
          user_ocid          = "${{ secrets.OCI_CLI_USER }}"
          fingerprint        = "${{ secrets.OCI_CLI_FINGERPRINT }}"
          private_key_path   = "/home/runner/.oci/oci_api_key.pem"
          region             = "${{ secrets.OCI_CLI_REGION }}"
          oci_namespace      = "${{ secrets.OCI_NAMESPACE }}"
          EOF
          
          # Add infrastructure configuration
          cat >> terraform.tfvars << EOF
          # Infrastructure Configuration
          compartment_id      = "${{ secrets.OCI_COMPARTMENT_ID }}"
          availability_domain = "${{ secrets.OCI_AVAILABILITY_DOMAIN }}"
          subnet_id          = "${{ secrets.OCI_PRIVATE_SUBNET }}"
          vcn_id             = "${{ secrets.OCI_VCN_ID }}"
          image_id           = "${{ secrets.OCI_CUSTOM_IMAGE }}"
          ssh_public_key     = "${{ secrets.SSH_PUBLIC_KEY }}"
          ssh_private_key    = "${{ secrets.SSH_PRIVATE_KEY }}"
          tailscale_auth_key = "${{ secrets.TAILSCALE_AUTH_KEY }}"
          EOF

      - name: Clean up Tailscale entries before destroy
        run: |
          echo "üßπ Cleaning up Tailscale entries for environment: ${{ github.event.inputs.environment }}"
          
          # Define hostnames based on environment
          HOSTNAMES=(
            "k8s-controller-${{ github.event.inputs.environment }}"
            "k8s-worker-1-${{ github.event.inputs.environment }}"
            "k8s-worker-2-${{ github.event.inputs.environment }}"
          )
          
          for hostname in "${HOSTNAMES[@]}"; do
            echo "Removing $hostname from Tailscale..."

            # Get devices with error handling
            DEVICE_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.TAILSCALE_API_KEY }}" \
              "https://api.tailscale.com/api/v2/tailnet/-/devices" 2>/dev/null)

            # Check if we got a valid response
            if [ -z "$DEVICE_RESPONSE" ] || [ "$DEVICE_RESPONSE" = "null" ]; then
              echo "‚ö†Ô∏è  Could not fetch Tailscale devices (API error or no devices)"
              continue
            fi

            # Extract nodeId with better error handling
            nodeId=$(echo "$DEVICE_RESPONSE" | \
              jq -r --arg hostname "$hostname" '
                if .devices then 
                  (.devices[] | select(.hostname == $hostname) | .nodeId // empty)
                else 
                  empty 
                end' 2>/dev/null)

            if [ -n "$nodeId" ] && [ "$nodeId" != "null" ] && [ "$nodeId" != "" ]; then
              echo "Found device $hostname with nodeId: $nodeId"
              DELETE_RESPONSE=$(curl -s -w "%{http_code}" -X DELETE \
                -H "Authorization: Bearer ${{ secrets.TAILSCALE_API_KEY }}" \
                "https://api.tailscale.com/api/v2/device/$nodeId" 2>/dev/null)
              
              if [[ "$DELETE_RESPONSE" == *"200"* ]] || [[ "$DELETE_RESPONSE" == *"204"* ]]; then
                echo "‚úÖ Removed $hostname from Tailscale"
              else
                echo "‚ö†Ô∏è  Failed to remove $hostname (may already be gone)"
              fi
            else
              echo "‚ÑπÔ∏è  $hostname not found in Tailscale (already clean or never existed)"
            fi
          done

          echo "üéâ Tailscale cleanup complete"

      - name: OCI Backend Configuration Info
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          echo "=== OCI Backend Configuration ==="
          echo "Using OCI native backend for state management"
          echo "Bucket: terraform-state-${{ github.event.inputs.environment }}"
          echo "Namespace: ${{ secrets.OCI_NAMESPACE }}"
          echo "Region: ${{ secrets.OCI_CLI_REGION }}"
          echo "Key: k0s-cluster/terraform.tfstate"
          echo "Auth: APIKey (using ~/.oci/config profile DEFAULT)"

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          terraform init \
            -backend-config="namespace=${{ secrets.OCI_NAMESPACE }}" \
            -backend-config="region=${{ secrets.OCI_CLI_REGION }}"

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          echo "üóëÔ∏è  Destroying ${{ github.event.inputs.environment }} environment..."
          terraform destroy -auto-approve

      - name: Destroy Summary
        run: |
          echo "========================================="
          echo "üóëÔ∏è  Environment Destroyed"
          echo "========================================="
          echo ""
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "All resources have been destroyed."
          echo "========================================="
