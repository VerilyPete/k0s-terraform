name: 'Destroy Environment'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - staging
          - production
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

permissions:
  contents: read
  id-token: write

env:
  TF_VERSION: '1.12.1'
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
  # These environment variables are no longer needed - using terraform.tfvars instead

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Validate destroy confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "‚ùå Destroy confirmation failed. You must type 'DESTROY' exactly."
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup OCI CLI
        run: |
          # Install OCI CLI
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh > install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          rm install.sh
          
          # Configure OCI CLI using absolute paths
          mkdir -p /home/runner/.oci
          echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > /home/runner/.oci/oci_api_key.pem
          chmod 600 /home/runner/.oci/oci_api_key.pem
          
          cat > /home/runner/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          region=${{ secrets.OCI_CLI_REGION }}
          key_file=/home/runner/.oci/oci_api_key.pem
          EOF
          
          chmod 600 /home/runner/.oci/config

      - name: Create terraform.tfvars
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          # Create terraform.tfvars with private key path
          cat > terraform.tfvars << EOF
          # OCI Provider Configuration
          tenancy_ocid       = "${{ secrets.OCI_CLI_TENANCY }}"
          user_ocid          = "${{ secrets.OCI_CLI_USER }}"
          fingerprint        = "${{ secrets.OCI_CLI_FINGERPRINT }}"
          private_key_path   = "/home/runner/.oci/oci_api_key.pem"
          region             = "${{ secrets.OCI_CLI_REGION }}"
          oci_namespace      = "${{ secrets.OCI_NAMESPACE }}"
          EOF
          
          # Add infrastructure configuration
          cat >> terraform.tfvars << EOF
          # Infrastructure Configuration
          compartment_id      = "${{ secrets.OCI_COMPARTMENT_ID }}"
          availability_domain = "${{ secrets.OCI_AVAILABILITY_DOMAIN }}"
          subnet_id          = "${{ secrets.OCI_PRIVATE_SUBNET }}"
          vcn_id             = "${{ secrets.OCI_VCN_ID }}"
          image_id           = "${{ secrets.OCI_CUSTOM_IMAGE }}"
          ssh_public_key     = "${{ secrets.SSH_PUBLIC_KEY }}"
          tailscale_auth_key = "${{ secrets.TAILSCALE_AUTH_KEY }}"
          EOF
          
          # ssh_private_key removed - no longer using provisioners

      - name: Clean up Tailscale entries before destroy
        run: |
          echo "üßπ Cleaning up Tailscale entries for environment: ${{ github.event.inputs.environment }}"
          
          # Get all devices from Tailscale API
          echo "Fetching all Tailscale devices..."
          DEVICE_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.TAILSCALE_API_KEY }}" \
            "https://api.tailscale.com/api/v2/tailnet/-/devices" 2>/dev/null)

          # Check if we got a valid response
          if [ -z "$DEVICE_RESPONSE" ] || [ "$DEVICE_RESPONSE" = "null" ]; then
            echo "‚ö†Ô∏è  Could not fetch Tailscale devices (API error or no devices)"
            exit 0
          fi

          # Extract all devices that match our patterns (including partial matches)
          DEVICES_TO_DELETE=$(echo "$DEVICE_RESPONSE" | jq -r '
            if .devices then 
              .devices[] | select(
                (.hostname | test("k0s-controller-staging")) or
                (.hostname | test("k0s-worker-[0-9]+-staging")) or
                (.hostname | test("^k0s-controller-${{ github.event.inputs.environment }}")) or
                (.hostname | test("^k0s-worker-[0-9]+-${{ github.event.inputs.environment }}"))
              ) | {hostname: .hostname, nodeId: .nodeId}
            else 
              empty 
            end' 2>/dev/null)

          if [ -z "$DEVICES_TO_DELETE" ]; then
            echo "‚ÑπÔ∏è  No matching Tailscale devices found to clean up"
            exit 0
          fi

          # Parse devices into arrays
          DEVICE_HOSTNAMES=($(echo "$DEVICES_TO_DELETE" | jq -r '.hostname' 2>/dev/null))
          DEVICE_NODEIDS=($(echo "$DEVICES_TO_DELETE" | jq -r '.nodeId' 2>/dev/null))

          echo "Found ${#DEVICE_HOSTNAMES[@]} devices to remove:"
          for i in "${!DEVICE_HOSTNAMES[@]}"; do
            echo "  - ${DEVICE_HOSTNAMES[$i]} (nodeId: ${DEVICE_NODEIDS[$i]})"
          done
          echo ""
          
          # Remove each device with enhanced error handling
          REMOVAL_COUNT=0
          FAILED_REMOVALS=()
          
          for i in "${!DEVICE_HOSTNAMES[@]}"; do
            hostname="${DEVICE_HOSTNAMES[$i]}"
            nodeId="${DEVICE_NODEIDS[$i]}"
            
            echo "Removing $hostname from Tailscale..."

            if [ -n "$nodeId" ] && [ "$nodeId" != "null" ] && [ "$nodeId" != "" ]; then
              echo "  Using nodeId: $nodeId"
              
              # Validate nodeId format (should be alphanumeric)
              if [[ ! "$nodeId" =~ ^[a-zA-Z0-9]+$ ]]; then
                echo "  ‚ùå Invalid nodeId format: $nodeId"
                FAILED_REMOVALS+=("$hostname (invalid nodeId)")
                continue
              fi
              
              # Make delete request with better error handling
              DELETE_RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE \
                -H "Authorization: Bearer ${{ secrets.TAILSCALE_API_KEY }}" \
                "https://api.tailscale.com/api/v2/device/$nodeId" 2>&1)
              curl_exit_code=$?
              
              if [ $curl_exit_code -ne 0 ]; then
                echo "  ‚ùå curl command failed for $hostname (exit code: $curl_exit_code)"
                echo "  curl error: $DELETE_RESPONSE"
                FAILED_REMOVALS+=("$hostname (curl error)")
                continue
              fi
              
              # Parse response and status code
              http_code=$(echo "$DELETE_RESPONSE" | tail -n1)
              response_body=$(echo "$DELETE_RESPONSE" | head -n -1)
              
              echo "  HTTP Status: $http_code"
              if [ -n "$response_body" ]; then
                echo "  Response: $response_body"
              fi
              
              if [[ "$http_code" == "200" ]] || [[ "$http_code" == "204" ]]; then
                echo "  ‚úÖ Successfully removed $hostname"
                REMOVAL_COUNT=$((REMOVAL_COUNT + 1))
              else
                echo "  ‚ö†Ô∏è  Failed to remove $hostname (HTTP $http_code)"
                FAILED_REMOVALS+=("$hostname (HTTP $http_code)")
              fi
            else
              echo "  ‚ùå No valid nodeId found for $hostname"
              FAILED_REMOVALS+=("$hostname (no nodeId)")
            fi
          done

          echo ""
          echo "üéâ Tailscale cleanup summary:"
          echo "  Total devices: ${#DEVICE_HOSTNAMES[@]}"
          echo "  Successfully removed: $REMOVAL_COUNT"
          echo "  Failed removals: ${#FAILED_REMOVALS[@]}"
          
          if [ ${#FAILED_REMOVALS[@]} -gt 0 ]; then
            echo "  Failed devices:"
            printf "    - %s\n" "${FAILED_REMOVALS[@]}"
            
            # Exit with error if critical failures occurred
            if [ ${#FAILED_REMOVALS[@]} -eq ${#DEVICE_HOSTNAMES[@]} ]; then
              echo "‚ùå All device removals failed - this may indicate an API or authentication issue"
              exit 1
            else
              echo "‚ö†Ô∏è  Some devices failed to remove but continuing with terraform destroy"
            fi
          fi

      - name: OCI Backend Configuration Info
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          echo "=== OCI Backend Configuration ==="
          echo "Using OCI native backend for state management"
          echo "Bucket: terraform-state-${{ github.event.inputs.environment }}"
          echo "Namespace: ${{ secrets.OCI_NAMESPACE }}"
          echo "Region: ${{ secrets.OCI_CLI_REGION }}"
          echo "Key: k0s-cluster/terraform.tfstate"
          echo "Auth: APIKey (using ~/.oci/config profile DEFAULT)"

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          terraform init \
            -backend-config="namespace=${{ secrets.OCI_NAMESPACE }}" \
            -backend-config="region=${{ secrets.OCI_CLI_REGION }}"

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          echo "üóëÔ∏è  Destroying ${{ github.event.inputs.environment }} environment..."
          terraform destroy -auto-approve

      - name: Destroy Summary
        run: |
          echo "========================================="
          echo "üóëÔ∏è  Environment Destroyed"
          echo "========================================="
          echo ""
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "All resources have been destroyed."
          echo "========================================="
