name: 'K0s Cluster Deploy'

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: string
      controller_ip:
        description: 'Controller IP address'
        required: true
        type: string
      controller_hostname:
        description: 'Controller hostname'
        required: true
        type: string
    secrets:
      OCI_CLI_USER:
        required: true
      OCI_CLI_TENANCY:
        required: true
      OCI_CLI_FINGERPRINT:
        required: true
      OCI_CLI_KEY_CONTENT:
        required: true
      OCI_CLI_REGION:
        required: true
      OCI_COMPARTMENT_ID:
        required: true
      OCI_PRIVATE_SUBNET:
        required: true
      OCI_ROUTE_TABLE_STAGING:
        required: true
      OCI_ROUTE_TABLE_PRODUCTION:
        required: true
      OCI_NAT_GATEWAY:
        required: true
      OCI_SERVICE_GATEWAY:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      TAILSCALE_API_KEY:
        required: false

permissions:
  contents: read
  id-token: write

env:
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

jobs:
  k0s-deployment:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          # Setup SSH key for accessing nodes
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add known hosts
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Disable strict host key checking for OCI instances
          cat >> ~/.ssh/config << EOF
          Host 10.0.1.*
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
              LogLevel QUIET
          EOF

      - name: Wait for k0s controller to be ready
        run: |
          echo "🔄 Waiting for k0s controller to be ready at ${{ inputs.controller_ip }}"
          
          # Wait for SSH connectivity
          for i in {1..30}; do
            if ssh -o ConnectTimeout=10 opc@${{ inputs.controller_ip }} "echo 'SSH connection successful'" 2>/dev/null; then
              echo "✅ SSH connection established"
              break
            fi
            echo "Attempt $i/30: Waiting for SSH connectivity..."
            sleep 10
          done
          
          # Wait for k0s to be ready
          echo "🔄 Waiting for k0s to be ready..."
          for i in {1..60}; do
            if ssh opc@${{ inputs.controller_ip }} "k0s kubectl get nodes" 2>/dev/null; then
              echo "✅ K0s controller is ready"
              break
            fi
            echo "Attempt $i/60: Waiting for k0s..."
            sleep 10
          done

      - name: Get worker join token
        id: join_token
        run: |
          echo "📝 Getting worker join token from controller..."
          
          # Get the worker token from the controller
          TOKEN=$(ssh opc@${{ inputs.controller_ip }} "sudo cat /tmp/worker-token.txt" 2>/dev/null || true)
          
          if [ -z "$TOKEN" ]; then
            echo "⚠️  No existing token found, generating new one..."
            TOKEN=$(ssh opc@${{ inputs.controller_ip }} "k0s token create --role=worker --expiry=48h" 2>/dev/null)
          fi
          
          if [ -z "$TOKEN" ]; then
            echo "❌ Failed to get worker join token"
            exit 1
          fi
          
          # Save token securely (don't echo it)
          echo "worker_token=$TOKEN" >> $GITHUB_OUTPUT
          echo "✅ Worker join token obtained (${#TOKEN} characters)"

      - name: Join worker nodes to cluster
        run: |
          echo "🔗 Joining worker nodes to k0s cluster..."
          
          # Get list of worker nodes from Tailscale or OCI
          # For now, assuming workers are discoverable via hostname pattern
          
          # This is a simplified example - in practice, you'd want to:
          # 1. Query OCI for worker instances in the environment
          # 2. Or use Tailscale API to find worker nodes
          # 3. SSH to each worker and join them to the cluster
          
          echo "ℹ️  Worker joining logic would be implemented here"
          echo "    - Discover worker nodes for environment: ${{ inputs.environment }}"
          echo "    - SSH to each worker"
          echo "    - Run: k0s install worker --token-file /tmp/token.txt"
          echo "    - Start k0s worker service"
          
          # Placeholder for actual worker joining logic
          ssh opc@${{ inputs.controller_ip }} "k0s kubectl get nodes" || true

      - name: Wait for all nodes to be ready
        run: |
          echo "⏳ Waiting for all nodes to join and become ready..."
          
          # Wait for all nodes to be in Ready state
          for i in {1..30}; do
            READY_NODES=$(ssh opc@${{ inputs.controller_ip }} "k0s kubectl get nodes --no-headers | grep -c Ready" 2>/dev/null || echo "0")
            TOTAL_NODES=$(ssh opc@${{ inputs.controller_ip }} "k0s kubectl get nodes --no-headers | wc -l" 2>/dev/null || echo "0")
            
            echo "Attempt $i/30: $READY_NODES/$TOTAL_NODES nodes ready"
            
            if [ "$READY_NODES" -gt "0" ] && [ "$READY_NODES" = "$TOTAL_NODES" ]; then
              echo "✅ All nodes are ready"
              break
            fi
            sleep 10
          done
          
          # Display final node status
          echo "📊 Final node status:"
          ssh opc@${{ inputs.controller_ip }} "k0s kubectl get nodes -o wide" || true

      - name: Wait for pod CIDR assignments
        run: |
          echo "🔄 Waiting for kube-router to assign pod CIDRs to nodes..."
          
          # Wait for pod CIDR annotations to be present on all nodes
          for i in {1..30}; do
            NODES_WITH_CIDRS=$(ssh opc@${{ inputs.controller_ip }} \
              "k0s kubectl get nodes -o json | jq '.items[] | select(.metadata.annotations[\"kube-router.io/pod-cidr\"]) | .metadata.name' | wc -l" 2>/dev/null || echo "0")
            TOTAL_NODES=$(ssh opc@${{ inputs.controller_ip }} "k0s kubectl get nodes --no-headers | wc -l" 2>/dev/null || echo "0")
            
            echo "Attempt $i/30: $NODES_WITH_CIDRS/$TOTAL_NODES nodes have pod CIDR assignments"
            
            if [ "$NODES_WITH_CIDRS" -gt "0" ] && [ "$NODES_WITH_CIDRS" = "$TOTAL_NODES" ]; then
              echo "✅ All nodes have pod CIDR assignments"
              break
            fi
            sleep 10
          done
          
          # Display pod CIDR assignments
          echo "📊 Pod CIDR assignments:"
          ssh opc@${{ inputs.controller_ip }} \
            "k0s kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}: {.metadata.annotations.kube-router\.io/pod-cidr}{\"\\n\"}{end}'" || true

      - name: Configure cluster routes
        uses: ./.github/workflows/manage-oci-routes.yml
        with:
          environment: ${{ inputs.environment }}
          action: 'configure'
          controller_ip: ${{ inputs.controller_ip }}
        secrets: inherit

      - name: Verify cluster connectivity
        run: |
          echo "🔍 Verifying cluster connectivity and pod networking..."
          
          # Check cluster status
          echo "📊 Cluster status:"
          ssh opc@${{ inputs.controller_ip }} "k0s status" || true
          
          # Check pod networking
          echo "📊 Pod networking status:"
          ssh opc@${{ inputs.controller_ip }} "k0s kubectl get nodes -o wide" || true
          
          # Check if we can create a test pod
          echo "🧪 Testing pod creation..."
          ssh opc@${{ inputs.controller_ip }} "k0s kubectl run test-pod --image=busybox --rm -it --restart=Never -- echo 'Pod networking test successful'" || true

      - name: K0s Deployment Summary
        run: |
          echo "============================================="
          echo "🎉 K0s Cluster Deployment Complete - ${{ inputs.environment }}"
          echo "============================================="
          echo ""
          echo "Controller: ${{ inputs.controller_hostname }}"
          echo "Private IP: ${{ inputs.controller_ip }}"
          echo "Environment: ${{ inputs.environment }}"
          echo ""
          echo "✅ Cluster is ready for workload deployment"
          echo "✅ Pod networking routes have been configured"
          echo "============================================="